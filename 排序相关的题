排序算法的稳定性以及注意点：
http://maywanting.wang/2016/04/13/20160413algorithm-sort/ 常见排序算法
插入排序是从后往前插入，这样可以保证插入的次数最少

https://zhuanlan.zhihu.com/p/36120420
排序算法的稳定性：冒泡排序是针对相邻元素之间的排序，因此
选择排序，会有个交换的步骤，比如5，8，5，2，9可能会把2和5换掉，就不稳定了
插入排序稳定是因为比如1，3，5，4，6，4到第一个4插入的时候不会对已有造成影响，第二个4从后往前插入已有4的后面，比较方式是大于（插到已有4就是不稳定了）
move zeroes
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        if (nums.empty()) return;
        int i = 0;
        int j = nums.size() - 1;
        while (i < j) {
            while(nums[i] != 0 && i < j) ++i;
            while(nums[j] == 0 && i < j) --j;
            if (i != j) std::swap(nums[i++], nums[j--]);
        }
        
    }
};
这一题最基本的类似快排的解法是错误的，会打乱原来的顺序，出现问题的原因是两个指针一个最前一个最后面，交换的时候很容易就越过了中间的元素。
怎么才能不越过中间的元素呢？观察结构0，1，0，3，9只需要保证1一定比3先排到最前面即可。怎么做到？两个指针都从最前面开始跑，快指针直到不为0的时候交换之后
慢指针才前进。另外对应一种情况，前面没有0的时候都要前进（相当于跳过前面的非0），但实际这两种情况可以合并，快指针不为0同时前进（但要知道为什么这么做）

非基于比较的排序http://bookshadow.com/weblog/2014/12/14/leetcode-maximum-gap/
(max - min)/size - 1 ceil最大值不会小于这个（均匀分布差最小），所以每个桶的容量剩下就是怎么实现桶排序的问题
https://zxi.mytechroad.com/blog/difficulty/hard/leetcode-164-maximum-gap/ 实现可以看这个，主要是下标的问题，怎么分

//有一类最难的dfs需要用到贪心或者dp，比如类似dijkstra
490 the maze
本题bfs的难点就在于终止条件是什么？因为和普通的dfs越界不一样
最开始的想法是四周都是墙或者周围都停不下来
https://segmentfault.com/a/1190000017163338 这个比较好理解一些
class Solution {
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        int m = maze.length, n = maze[0].length;
        boolean[][] visited = new boolean[m][n];
        return dfs(maze, visited, start, destination);
    }
    private boolean dfs(int[][] maze, boolean[][] visited, int[] start, int[] destination) {
        int row = start[0], col = start[1];
        
        //check boundaries and if the point visited before
        if (row < 0 || row >= maze.length || col < 0 || col >= maze[0].length || visited[row][col]) return false;
        
        //mark as a visited stop point
        visited[row][col] = true;
        
        //if stop point is destination => true
        //注意能进入dfs的前提是已经在这一点停住了（该点能成为出发点的条件是必须在这一点停住，不是所有点都能停下，因此不可能出现滑到一般的情况）
        //那样就没法写终止条件了，注意不要受传统dfs写法的困扰，看下面的遍历条件也能知道，进入下一个dfs的条件是已经停下了。
        if (row == destination[0] && col == destination[1]) return true;
        
        //DFS on four directions
        int[][] dirs = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
        for (int i = 0; i < 4; i++) {
            int x = row, y = col;
            
            //rolling until out or hit the wall 
            while (x >= 0 && x < maze.length && y >= 0 && y < maze[0].length && maze[x][y] != 1) {
                x += dirs[i][0];
                y += dirs[i][1];
            }
            
            //back to the stop point
            x -= dirs[i][0];
            y -= dirs[i][1];
            
            //start another dfs from the stop point
            if (dfs(maze, visited, new int[]{x, y}, destination)) return true;
        }
        return false;
    }
}
下面是自己写的bfs
class Solution {
public:
    bool hasPath(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {
        int row = maze.size(), col = maze[0].size();
        std::vector<std::vector<bool>> visited(row, std::vector<bool>(col, false));
        std::queue<std::pair<int, int>> que;
        int destx destination[0], desty = destination[1];
        que.push(std::make_pair(destx, desty));//函数有模板的实参推演
        visited[start[0]][start[1]] = true;
        std::vector<std::vector<int>> dirs{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        while (!que.empty()) {
            //auto top = que.top();
            auto top = que.front();//queue没有top方法，栈和优先队列才有，队列只有front和back方法
            int curx= top.first, cury = top.second;
            que.pop();
            for (auto& dir:dirs) {
                int x = curx, y = cury;
                int newx = dir[0], newy = dir[1];//相当于普通的一步bfs，不能改变原来的x，y
                while ( x + newx >= 0 && x + newx < row && y + newy >= 0 && y + newy < col && maze[x + newx][y + newy] == 0) {
                    x += newx;
                    y += newy;
                }
                if (x == destx && y == desty) {//这时候x，y一定是合法的
                    return true;
                }
                if (!visited[x][y]) {
                    visited[x][y] = true;//别忘了保存访问过的节点信息
                    que.push({x, y});
                }
            }
        }
        return false;//别忘了最后返回false
    }
};


//和普通dijkstra算法稍有不同的是到单点的最短路径，之前写的是到所有节点的最短路径，因此找到目标节点的最短路径就够了
//体现在代码上就是终止条件中判断是否等于想判断的点
https://www.jianshu.com/p/602b2022bdc9 可以看下上面写的答案对比
505	The Maze II 也是使用dijkstra
class Solution {
public:
    int shortestDistance(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {
        vector<vector<int>> dirs{{0,-1},{-1,0},{0,1},{1,0}};
        int row = maze.size(), col = maze[0].size();
        std::vector<std::vector<int>> dis(row, std::vector<int>(col, INT_MAX));
        std::vector<std::vector<bool>> known(row, std::vector<bool>(col, false));
        //auto compare = [](const nodetype& nodea, const nodetype& nodeb) {return nodea.first > nodeb.first;};
        //std::priority_queue<nodetype, std::vector<nodetype>, decltype(compare)> que(compare);
        //下面这种不带compare的写法是错误的
        //std::priority_queue<nodetype, std::vector<nodetype>, decltype(compare)> que;
        std::priority_queue<nodetype, std::vector<nodetype>, comparator> que;
        int destx = destination[0], desty = destination[1];
        int sx = start[0], sy = start[1];
        que.push({0, {sx, sy}});//待确认是否支持
        while (!que.empty()) {
            auto top = que.top();
            int weight = top.first, curx = top.second.first, cury = top.second.second;
            if (curx == destx && cury == desty) {//终止条件，判断到目标点就结束了
                return weight;
            }
            known[curx][cury] = true;
            que.pop();
            for (auto& dir:dirs) {
                int x = curx, y = cury;
                int newx = dir[0], newy = dir[1];//相当于普通的一步bfs，不能改变原来的x，y
                int step = 0;//前进了几步
                while ( x + newx >= 0 && x + newx < row && y + newy >= 0 && y + newy < col && maze[x + newx][y + newy] == 0) {
                    ++step;
                    x += newx;
                    y += newy;
                }
                if (!known[x][y] && weight + step < dis[x][y]) {//已知的话就不用存了，剪枝
                    dis[x][y] = weight + step;
                    que.push({weight + step, {x, y}});
                }
            }
        }
        return -1;
    }
private:
    typedef std::pair<int, std::pair<int, int>> nodetype;
    struct comparator {
        bool operator()(const nodetype& nodea, const nodetype& nodeb) {
            return nodea.first > nodeb.first;};
    };
};

499	The Maze III
贪吃蛇 
longest increasing path in a matrix

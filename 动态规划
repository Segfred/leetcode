https://zhuanlan.zhihu.com/p/41257286
1、扔鸡蛋问题：假设m层楼，n个鸡蛋，假设第一次k层扔出
for k = 1:m
分为碎还是不碎
碎了的话k-1, n-1，没碎的话m-k,n(往下的不用试了）
取所有k的最小值，并且更新最小值的时候打印出来k
https://www.cnblogs.com/grandyang/p/5677550.html

2、[LeetCode] Guess Number Higher or Lower II 猜数字大小之二 min max，求两个最大值之间哪个k最小，和扔鸡蛋的问题很像
在区间[i, j]之前遍历所有的k，使得k对应的分裂的两个最大值最小

3、https://www.geeksforgeeks.org/subarray-whose-sum-is-closest-to-k/ 一个集合有正有负，选取其中的数使和最接近给定的值

4、edit distance和最长公共子序列为什么最后一个相等就不用比较了，一定是ij=i-1j-1
考虑ij-1,j删除已经增加了一次，而i最多匹配一次，最多让前面减少一，一来一回不会比i-1j-1更好

5、https://blog.csdn.net/Ber_Bai/article/details/77112975 信件错排问题
前面假设n排在了第k位（两者不等有n-1）种排法，因此有下面的情况
显然D1=0，D2=1。当n≥3时，不妨设n排在了第k位，其中k≠n，也就是1≤k≤n-1。那么我们现在考虑第n位的情况：当k排在第n位时，除了n和k以外还有n-2个数，其错排数为Dn-2。

当k不排在第n位时，那么将第n位重新考虑成一个新的“第k位”，（也就是说第k位本来是应该排在第n位上的，排在第k位的原来第n位被拿掉了）这时的包括k在内的剩下n-1个数的每一种错排，都等价于只有n-1个数时的错排（只是其中的第k位会换成第n位）。其错排数为Dn-1。

也就是说第二种情况下：本来k是应该放在第n位的，现在不让放了（问有多少种情况），加上原来n-2个不让放的，所以应该是f(n-1)
k有n-1种取值，所以Dn=(n-1)(Dn-1 + Dn-2)

6、http://chuansong.me/n/1607394352821 decode ways可以由两种状态得到：
f(i)=f(i-1)+f(i-2)含义是，f(i)可以由两种状态得到：前面i-1个字符在一起或者前面i-2个字符在一起。当然有条件，条件不满足的话只能由一种状态得到。
若第i位为0，表明没法以单独拿出来前面i-1位作为结果。只能再往前看

7、scramble string这一篇总结的比较好
两个字符串是不是可以scramble实际上可以按照长度一点点来扩展
https://blog.csdn.net/linhuanmars/article/details/24506703

8、Russian Doll Envelopes
https://blog.csdn.net/qq508618087/article/details/51619435
https://www.acwing.com/solution/LeetCode/content/2865/
为什么宽度从小到大，高度从大大小？
因为这样可以保证后面高度大于前面时候一定宽度也大于前面（因为宽度相等高度变小，现在高度变大了且在后面宽度也一定大），否则6，4 6，7高度虽然大了，width却是相等的

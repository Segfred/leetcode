https://www.jianshu.com/p/fd6a4774e3fe
上面这个解法和之前的二分模板一直，都是l <= r 并且都加一或者减一，和search for a range比较接近
找上面实际上是找第一个，下边界是找最后一个。为什么从x - 1不从x? 结果都一样，会超出去 l = mid + 1 
public class Solution {
    int row = 0;
    int col = 0;
    public int minArea(char[][] image, int x, int y) {
        if (image == null || image.length == 0 || image[0].length == 0) {
            return 0;
        }
        
        this.row = image.length;
        this.col = image[0].length;
        
        int top = searchRow(image, 0, x - 1, false);
        int bottom = searchRow(image, x + 1, row - 1, true);
        
        int left = searchCol(image, 0, y - 1, false);
        int right = searchCol(image, y + 1, col - 1, true);
        
        return (right - left + 1) * (bottom - top + 1);
    }
    
    private int searchRow(char[][] image, int begin, int end, boolean flag) {
        while (begin <= end) {
            int mid = begin + (end - begin) / 2;
            boolean isBlack = false;
            for (int j = 0; j < col; j++) {
                if (image[mid][j] == '1') {
                    isBlack = true;
                    break;
                }
            }
            if (isBlack) {
                if (flag) {
                    begin = mid + 1;
                }
                else {
                    end = mid - 1;
                }
            }
            else {
                if (flag) {
                    end = mid - 1;
                }
                else {
                    begin = mid + 1;
                }
            }
        }
        return flag ? end : begin;//符合之前的模板，第一个选begin，最后一个选end（最后一个不符合才往左，一定不会超
    }
    
    private int searchCol(char[][] image, int begin, int end, boolean flag) {
        while (begin <= end) {
            int mid = begin + (end - begin) / 2;
            boolean isBlack = false;
            for (int j = 0; j < row; j++) {
                if (image[j][mid] == '1') {
                    isBlack = true;
                    break;
                }
            }
            if (isBlack) {
                if (flag) {
                    begin = mid + 1;
                }
                else {
                    end = mid - 1;
                }
            }
            else {
                if (flag) {
                    end = mid - 1;
                }
                else {
                    begin = mid + 1;
                }
            }
        }
        return flag ? end : begin;
    }
}

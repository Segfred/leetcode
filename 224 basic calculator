https://www.cnblogs.com/grandyang/p/4570699.html
class Solution {
public:
    int calculate(string s) {
        int res = 0, sign = 1, n = s.size();
        stack<int> st;
        for (int i = 0; i < n; ++i) {
            char c = s[i];
            if (c >= '0') {
                int num = 0;
                while (i < n && s[i] >= '0') {
                    num = 10 * num + (s[i++] - '0');
                }//边遍历的时候就边计算，计算的是括号里面的一个连续的数（256这种）
                res += sign * num;符号是一个数的符号：34 - 585比如这里585的符号，不是-( 34 - 585)最外面的符号
                --i;
            } else if (c == '+') {
                sign = 1;
            } else if (c == '-') {
                sign = -1;//这里面才是括号最外面的符号，但是是否需要入栈还不知道，取决于后面的是不是小括号，是小括号才入栈
            } else if (c == '(') {
                st.push(res);//比如(5 + (78 - 89))5计算完了要入栈代表每个上一次的结果，计算里里面78 - 89的结果还要加上之前的结果，因此要保存每一层计算的结果
                st.push(sign);
                res = 0;
                sign = 1;
            } else if (c == ')') {
                res *= st.top(); st.pop();
                res += st.top(); st.pop();
            }
        }
        return res;
    }
};
